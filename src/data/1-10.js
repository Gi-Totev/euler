import Multiples35 from "../components/1-10/1-MultiplesOf3and5";
import EvenFibonacciNumbers from "../components/1-10/2-EvenFibonacciNumbers";
import LargestPrimeFactor from "../components/1-10/3-LargestPrimeFactor";
import LargestPalindromeProduct from "../components/1-10/4-LargesPalindromeProduct";
import SmallestMultiple from "../components/1-10/5-SmallestMultiple";
import SumSquareDifference from "../components/1-10/6-SumSquareDifference";
import TenThousandFirstPrime from "../components/1-10/7-10001stPrime";
import LargestProductInASeries from "../components/1-10/8-LargestProductInASeries";
import SpecialPythagoreanTriplet from "../components/1-10/9-SpecialPythagoreanTriplet";
import SummationOfPrimes from "../components/1-10/10-SummationOfPrimes";

const PROBLEMS_FIRST_TEN = [
  {
    id: 1,
    name: "Multiples of 3 and 5",
    desc: " If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.",
    expected:
      " f(10) should return a number. <br /> f(49) should return 543. <br /> f(1000) should return 233168. <br /> f(8456) should return 16687353. <br /> f(19564) should return 89301183.",
  },
  {
    id: 2,
    name: "Even Fibonacci Numbers",
    desc: " Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: <br /> 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... <br /> By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.",
    expected:
      " f(10) should return 10. <br /> f(34) should return 44. <br /> fm(60) should return 44. <br /> f(1000) should return 798. <br /> f(100000) should return 60696. <br /> f(4000000) should return 4613732.",
  },
  {
    id: 3,
    name: "Largest Prime Factor",
    desc: " The prime factors of 13195 are 5, 7, 13 and 29. <br /> What is the largest prime factor of the given number?",
    expected:
      " largestPrimeFactor(2) should return 2. <br /> f(3) should return 3. <br /> f(5) should return 5. <br /> f(7) should return 7. <br /> f(8) should return 2. <br /> f(13195) should return 29. <br /> f(600851475143) should return 6857.",
  },
  {
    id: 4,
    name: "Largest Palindrome Product",
    desc: " A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. <br /> Find the largest palindrome made from the product of two n-digit numbers.",
    expected: " f(2) should return 9009. <br /> f(3) should return 906609.",
  },
  {
    id: 5,
    name: "Smallest Multiple",
    desc: " 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. <br /> What is the smallest positive number that is evenly divisible by all of the numbers from 1 to n?",
    expected:
      " f(5) should return 60. <br /> f(7) should return 420. <br /> f(10) should return 2520. <br /> f(13) should return 360360. <br /> f(20) should return 232792560",
  },
  {
    id: 6,
    name: "Sum Square Difference",
    desc: " The sum of the squares of the first ten natural numbers is <br /> &nbsp; 1^2 + 2^2 + ... + 10^2 = 385 <br /> The square of the sum of the first ten natural numbers is <br /> &nbsp; (1 + 2 + ... + 10)^2 = 552 = 3025 <br /> Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is <br /> &nbsp; 3025 − 385 = 2640. <br /> Find the difference between the sum of the squares of the first n natural numbers and the square of the sum.",
    expected:
      " f(10) should return 2640. <br /> f(20) should return 41230. <br /> f(100) should return 25164150.",
  },
  {
    id: 7,
    name: "10001st Prime",
    desc: " By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. <br /> What is the nth prime number?",
    expected:
      " f(6) should return 13. <br /> f(10) should return 29. <br /> f(100) should return 541. <br /> f(1000) should return 7919. <br /> f(10001) should return 104743.",
  },
  {
    id: 8,
    name: "Largest Product In A Series",
    desc: " The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832. <br /> Find the n adjacent digits in the 1000-digit number (in code) that have the greatest product. What is the value of this product?",
    expected:
      " f(4) should return 5832. <br /> f(13) should return 23514624000.",
  },
  {
    id: 9,
    name: "Special Pythagorean Triplet",
    desc: " A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, <br /> a^2 + b^2 = c^2 <br /> For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2. <br /> There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc such that a + b + c = n.",
    expected:
      " f(24) should return 480. <br /> f(120) should return 49920, 55080 or 60000 <br /> specialPythagoreanTriplet(1000) should return 31875000",
  },
  {
    id: 10,
    name: " Summation of Primes",
    desc: "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. <br /> Find the sum of all the primes below n.",
    expected:
      " f(17) should return 41. <br /> f(2001) should return 277050. <br /> f(140759) should return 873608362. <br /> f(2000000) should return 142913828922.",
  },
];

const SOLUTIONS_FIRST_TEN = [
  Multiples35,
  EvenFibonacciNumbers,
  LargestPrimeFactor,
  LargestPalindromeProduct,
  SmallestMultiple,
  SumSquareDifference,
  TenThousandFirstPrime,
  LargestProductInASeries,
  SpecialPythagoreanTriplet,
  SummationOfPrimes,
];

export { PROBLEMS_FIRST_TEN, SOLUTIONS_FIRST_TEN };
